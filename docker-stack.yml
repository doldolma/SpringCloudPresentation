version: "2.4"
services:
  mysql:
    image: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 123123
    command: --init-file /data/application/grews.sql
    volumes:
      - ./mysql/grews.sql:/data/application/grews.sql
    networks:
      - spring-cloud-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-hlocalhost", "-uroot", "-p123123"]
#      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s

  mariadb:
    image: mariadb
    ports:
      - "3308:3306"
    environment:
      MARIADB_ROOT_PASSWORD: 123123
      MARIADB_DATABASE: testdb
    networks:
      - spring-cloud-network
#    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-hlocalhost", "-uroot", "-p123123" ]
#      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - spring-cloud-network
#    restart: always

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - spring-cloud-network

  kafka:
    image: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "newLetter:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - spring-cloud-network

  kafka_manager:
    image: hlebalbau/kafka-manager:stable
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "random-secret"
    networks:
      - spring-cloud-network

  apigateway-service:
    image: apigateway-service
    ports:
      - "8000:8000"
    environment:
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
    networks:
      - spring-cloud-network
    depends_on:
      discovery-service:
        condition: service_started
      user-service:
        condition: service_started
      letter-service:
        condition: service_started

  config-service:
    image: config-service
    ports:
      - "8888:8888"
    environment:
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: https://github.com/doldolma/SpringCloudConfig.git
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/application/default" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    depends_on:
      - kafka

  letter-service:
    image: letter-service
    environment:
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:mariadb://mariadb:3306/testdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123123
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
    networks:
      - spring-cloud-network
    depends_on:
      mariadb:
        condition: service_healthy
      config-service:
        condition: service_healthy

  discovery-service:
    image: discovery-service
    ports:
      - "8761:8761"
    networks:
      - spring-cloud-network

  user-service:
    image: user-service
    environment:
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/jest_presentation
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123123
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
    networks:
      - spring-cloud-network
    depends_on:
      mysql:
        condition: service_healthy
      config-service:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - spring-cloud-network
    depends_on:
      - user-service

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - spring-cloud-network
    depends_on:
      - prometheus

#networks:
#  spring-cloud-network:
#    driver: bridge
#    gateway: 10.1.0.1
#    subnet: 10.1.0.0/16
##




#  user-service-node:
#    build: ./user-service
#    networks:
#      - spring-cloud-network
#    depends_on:
#      - mysql
#      - discovery-service
#      - apigateway-service
#      - letter-service
#    environment:
#      NODE_ENV: production
#      DATABASE_HOST: mysql
#      DATABASE_PORT: 3306
#      DATABASE_USERNAME: root
#      DATABASE_PASSWORD: 123123
#      KAFKA_HOST: kafka:9092
#      APIGATEWAY: https://grew.doldolma.com